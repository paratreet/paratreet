module DistributedOrbLB {
extern module DistBaseLB;
initnode void lbinit(void);

include "common.h";
include "LBCommon.h";

group [migratable] DistributedOrbLB : DistBaseLB {
  entry void DistributedOrbLB(const CkLBOptions &);
  initnode void initnodeFn();
  entry [reductiontarget] void perLBStates(CkReductionMsg * msg);
  entry [reductiontarget] void postLBStates(CkReductionMsg * msg);
  entry void endLB();
  entry void reportUniverseDimensions();
  entry [reductiontarget] void getUniverseDimensions(CkReductionMsg * msg);
  entry void binaryLoadPartitionWithBins(LBCommon::DorbPartitionRec rec);
  entry void createPartitions(LBCommon::DorbPartitionRec rec);
  entry void setPeSpliters(LBCommon::DorbPartitionRec rec);
  entry void reportBinLoads(LBCommon::DorbPartitionRec, std::vector<float>, std::vector<int>);
  //entry [reductiontarget] void getSumBinLoads(CkReductionMsg * msg);
  entry void finalPartitionStep(LBCommon::DorbPartitionRec);
  entry void reportFinalStepData(LBCommon::DorbPartitionRec, std::vector<LBCommon::LBShortCmp>);

  entry void finishedPartitionOneDim(LBCommon::DorbPartitionRec, float, float);
  entry void migrateObjects(std::vector<std::vector<Vector3D<Real>>> pe_splits);
  entry void acknowledgeIncomingMigrations(int count, float in_load);
  entry void sendFinalMigrations(int count);
};

};

