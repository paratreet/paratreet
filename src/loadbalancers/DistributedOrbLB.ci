module DistributedOrbLB {
extern module DistBaseLB;
initnode void lbinit(void);

include "common.h";
include "LBCommon.h";

  group [migratable] DistributedOrbLB : DistBaseLB {
    entry void DistributedOrbLB(const CkLBOptions &);
    initnode void initnodeFn();
    entry [reductiontarget] void perLBStates(CkReductionMsg * msg);
    entry [reductiontarget] void postLBStates(CkReductionMsg * msg);
    entry void endLB();
    entry void reportUniverseDimensions();
    entry [reductiontarget] void getUniverseDimensions(CkReductionMsg * msg);
    entry [expedited] void bCastSectionLoadBinning(LBCommon::DorbPartitionRec rec);
    entry void loadBinning(LBCommon::DorbPartitionRec rec);
    entry void createPartitions(LBCommon::DorbPartitionRec rec);
    entry void finalPartitionStep(LBCommon::DorbPartitionRec, int);
    entry [expedited] void mergeFinalStepData(LBCommon::DorbPartitionRec, std::vector<LBCommon::LBShortCmp>);
    entry [expedited] void mergeBinLoads(LBCommon::DorbPartitionRec, std::vector<float>, std::vector<int>);
    entry void finishedPartitionOneDim(LBCommon::DorbPartitionRec, float, float, int);
    entry void migrateObjects(std::vector<std::vector<Vector3D<Real>>> pe_splits);
    entry void acknowledgeIncomingMigrations(int count, float in_load);
    entry void doMigrations();
    entry void sendBackToken(LBCommon::LBCentroidAndIndexRecord obj);
    entry void sendFinalMigrations(int count);
    entry void reportPostLBStates();

    entry void recv_tokens(LBCommon::DorbPartitionRec rec1, LBCommon::DorbPartitionRec rec2, std::vector<LBCommon::LBCentroidAndIndexRecord> objs);
    entry void moveTokenWithSplitPoint(LBCommon::DorbPartitionRec rec1, LBCommon::DorbPartitionRec rec2);
    entry void bCastSectionMoveTokenWithSplitPoint(LBCommon::DorbPartitionRec rec1, LBCommon::DorbPartitionRec rec2);
    entry [expedited] void bCastSectionFinalPartitionStep(LBCommon::DorbPartitionRec rec, int curr_split_idx);
    entry [expedited] void bCastSectionGatherObjects(LBCommon::DorbPartitionRec rec);
    entry void mergeObjects(LBCommon::DorbPartitionRec rec);
    entry void addObjects(LBCommon::DorbPartitionRec rec, std::vector<LBCommon::LBCentroidAndIndexRecord> objs);
    entry void sendUpdatedTokens(std::vector<LBCommon::LBCentroidAndIndexRecord> tokens);
    entry void ackBruteForceResults(float load, int n_migrates);
    entry void waitForMigrations();
    entry void ackTokenReceived();
  };
};