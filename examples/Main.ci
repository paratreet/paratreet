mainmodule Main {
    extern module paratreet;

    readonly bool verify;
    readonly bool dual_tree;
    readonly int periodic;
    readonly Real theta;
    readonly int peanoKey;
    readonly Vector3D<Real> fPeriod;
    readonly int nReplicas;
    readonly int iter_start_collision;
    readonly Real max_timestep;
    readonly CProxy_EwaldData ewaldProxy;

    initnode void initialize(void);

    extern entry void Partition<CentroidData> startDown<GravityVisitor> (GravityVisitor v);
    extern entry void Subtree<CentroidData> startDual<GravityVisitor> (GravityVisitor v);
    extern entry void Partition<CentroidData> startBasicDown<GravityVisitor> (GravityVisitor v);
    extern entry void Partition<CentroidData> startDown<CollisionVisitor> (CollisionVisitor v);
    extern entry void Partition<CentroidData> startUpAndDown<DensityVisitor> (DensityVisitor v);
    extern entry void Partition<CentroidData> startDown<PressureVisitor> (PressureVisitor v);
    extern entry void CacheManager<CentroidData> startPrefetch<GravityVisitor>(DPHolder<CentroidData>, CkCallback);
    extern entry void Driver<CentroidData> prefetch<GravityVisitor> (CentroidData, int, CkCallback);
    extern entry void ThreadStateHolder applyAccumulatedOpposingEffects(PPHolder<CentroidData>);

  nodegroup EwaldData {
    entry EwaldData();
    entry void EwaldInit(CentroidData, CkCallback);
  };
}
