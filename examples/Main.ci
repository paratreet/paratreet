mainmodule Main {
    extern module paratreet;

    readonly bool verify;
    readonly bool dual_tree;
    readonly bool periodic;
    readonly Real theta;
    readonly int peanoKey;
    readonly int iter_start_collision;
    readonly CProxy_CountManager count_manager;
    readonly CProxy_NeighborListCollector neighbor_list_collector;
    readonly CProxy_CollisionTracker collision_tracker;
    readonly CProxy_VisitAllTracker visit_all_tracker;

    initnode void initialize(void);

    group CountManager {
        entry CountManager(double min, double max, int nbins);
        entry void sum(const CkCallback&);
    }

    group NeighborListCollector {
        entry NeighborListCollector();
        entry void addRequest(int, Key);
        entry [inline] void forwardRequest(int, Particle);
        entry [inline] void fillRequest(int, Particle);
        entry void shareAccelerations();
        entry void addAccelerations(const std::vector<Particle>&);
        entry void forwardAccelerations(const std::vector<Particle>&);
        entry void reset(const CkCallback&);
    }

    group VisitAllTracker {
        entry VisitAllTracker();
        entry void reset(const CkCallback&);
    }

    nodegroup CollisionTracker {
        entry CollisionTracker();
        entry [exclusive] void setShouldDelete(Key key);
        entry void reset(const CkCallback&);
    }

    extern entry void Partition<CentroidData> startDown<GravityVisitor> (GravityVisitor v);

    extern entry void Subtree<CentroidData> startDual<GravityVisitor> (GravityVisitor v);
    extern entry void Partition<CentroidData> startBasicDown<GravityVisitor> (GravityVisitor v);
    extern entry void Partition<CentroidData> startDown<CollisionVisitor> (CollisionVisitor v);
    extern entry void Partition<CentroidData> startDown<VisitAllVisitor> (VisitAllVisitor v);
    extern entry void Partition<CentroidData> startBasicDown<VisitAllVisitor> (VisitAllVisitor v);
    extern entry void Partition<CentroidData> startUpAndDown<DensityVisitor> (DensityVisitor v);
    //extern entry void Partition<CentroidData> startDown<PressureVisitor> (PressureVisitor v);
    extern entry void CacheManager<CentroidData> startPrefetch<GravityVisitor>(DPHolder<CentroidData>, CkCallback);
    extern entry void Driver<CentroidData> prefetch<GravityVisitor> (CentroidData, int, CkCallback);
}
